#+TITLE: 日志
#+AUTHOR: yongfeizhai
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../static/css/style.css"/>
# #+SETUPFILE: ./org/theme-bigblow.setup
#+OPTIONS: toc:nil

#+begin_quote
不积跬步，无以至千里；不积小流，无以成江海！
#+end_quote

* 警惕EMACS中的消费主义

** 基本情况
1. 从大三开始接触emacs，陆陆续续也有三年左右，但是总感觉自己一直中emacs里面打转。
2. emacstalk 中的天文学家提到了 emacs 的学习曲线的图，很有感触。
3. 很多时候，对于 emacs ，抱有不切实际的幻想：以为会了 emacs 就可以神挡杀神，佛挡杀佛。就像一个中二少年要一个打败一切的神器一样。

** 基本论述要点
1. EMACS 是一款很厉害的软件，它不仅仅是编辑器。
2. 其实 EMACS 是很真诚的，他把他的所有都呈现给你（其实说的就是源码公开），可能也是市场上的很少有这般真诚的软件，让我们这些 EMACS 的使用陷入“宗教式”的行为的一个重要原因吧。大家对于 EMACS 似乎有点爱过头了，有些不理智了。当然也包括我。
3. 时间 对应于消费中的 金钱
4. 插件 对应于消费中的 商品
5. 用时间来折腾插件 对应于消费中的 购买行为
6. 制造插件的人因为自己的需求去创造了插件，我们不知道自己的需求（或者伪需求），稀里糊涂的用时间买下了这个插件。一个典型的表现：我并不是一个编程选手，但是我却会下载一大堆编程相关的插件。
   1. 更进一步的是，我甚至为了让这些插件能够用上，我开始学习一些语言，但是由于我根本没有什么目标，很多学习都是草草了之。
7. 社区弥漫着一些不好的观点：如编辑器之争，你只是一个 emacs 的用户，你为什么要跟着大家一起去对立 vim 呢？这个行为简直和机圈（或者饭圈）中小米用户骂其他用户一样，当然机圈的情况更复杂，涉及到很多其他的因素。又比如语言孰优孰劣。这些问题都是他妈的低智问题，我是真的受不了这些低智问题。把工具的低位上升到不该有的高度。工具本身就是为了解决问题而产生的，能解决问题就OK，工具的设计时盯的点是如何解决当下的问题，而不是想着我要设计一款无所不能的完美产品（如我要设计一个能解决所有问题的工具，工具先于问题，我还是觉得很好笑的，我们都不可能对所有问题的有预见力，也就不可能存在一个适用于所有问题的解决方案。所有的工具都受限于这个框架。）
   1. 我曾经很憎恶机圈和饭圈的低智行为，但是没想到我终究有一天成为了我最讨厌的人。
   2. 站在我自己的角度来看，我根本没有像用emacs这么长时间用过vim，我对于vim的了解远低于emacs的了解。我根本没有讨论孰好孰坏的前提。而且我觉得这些都是消费着对于商品的选择，那有说孰好孰坏的理由，真是奇怪。
8. emacs 中的很多行为和机圈（饭圈）的行为如出一辙。
9. 对 emacs 抱有不切实际的想法的一个原因。emacs 还有一个很致命的问题：就是 emacs 确实可以是一个效率工具（大部分场景是编程），而且使用 emacs 的人之中有很多厉害的人物（我想当然也不乏麻瓜信徒），让我们以为只要追随着 emacs （使用 emacs）就会变得很厉害一般，这个潜在的想法很致命，让我们理所当然的出售我们的时间，因为我们有一个很正直的原因：我们是为了进步，我们是在让我们更厉害，我们现在不够厉害，是对工具不够了解，我要出售更多的时间。这个想法是很有欺骗性和毒害性的，他把进步这个行为和使用某个编辑器挂钩，真是太可笑了。殊不知，不使用 emacs 的编程大牛们比比皆是。所以赶快停止你的荒谬想法。使用 emacs 只能说是一个习惯，别无其他，千万不要把使用 emacs 搞成了一个政治正确的事情，到处宣传，抑或是呆在自己的狭小空间中以为自己掌握了成功之道，在其中迷失。
   1. 当然你为什么会接触 emacs 呢？我其实一开始就是被这个想法骗过来的。
10. 有很多时候，时间比金钱更重要。所以我们消耗的成本完全不亚于陷于消费主义中花钱的成本，从另外一个角度来说，我们本来就没有什么钱，只有时间，这个时候时间对于我们的重要性完全不亚于金钱。还有很多时候，其实我们根本没有时间，我们只是逃避到 emacs 中
11. emacs 只是一个工具，工具的价值是在解决问题中体现的，不是你天天对着工具磨刀的。因为可能会有小伙伴说，磨刀不误砍柴工，但是你却总是在磨刀，总是觉得自己刀没有磨好。

** 一些暂时可以得出来的结论
1. 要有自己的需求。
2. 要知道时间很宝贵，在用时间买插件的时候要三思。
3. 不要对 EMACS 抱有不切实际的幻想，自己的成长和进步和 emacs 半毛钱关系没有。如果说你的成长必须要有 EMACS 的话，那你的成长是受限的，这是好事还是坏事，不言而明。
4. 不要让 EMACS 社区饭圈化，低智化。作为 EMACS 社区中的一员，所要做的就是警惕那些饭圈化，低智化的言论。

** 题外话
写这些话根本上是我对于自己的反思。当然也想分享给大家，一方面是对于我批评指正，一方面确实想帮助大家，让大家避免走我的弯路。算是一个经验的分享吧。

** 一些其他的思考
我觉得低智化，饭圈化的原因是。这些想法在在我们放松的时候过来的（或者说是以我们爱好的方式过来的），我们缺少警惕，我们被引导着。毕竟总是保持理性的思考是一件很累的事情，但是这些具有毒害性的想法却无孔不入。


* 两个整数最小公倍数相关定理的证明
CREATE: <2022-03-31 四>

文章仅供备忘，所以排版格式不是很规范

** 设两个互质的数分别为 a，b ，证明其最小公倍数为 ab

反证：假设存在 K < ab 为 a, b 的最小公倍数。
则 K/a，K/b 为整数，不妨设为 m,n。结合 K < ab 的假设。有：

m = K/a < ab/a = b , n = K/b < ab/b < b

又

a · m = a · K/a = K = K/b · b = n · b

得

am/b = n

由于 a，b 互质，且 m < b. 所以等式左边不为整数。而等式右边是整数。

矛盾，故假设不成立。

** 设 a, b 为整数。其最大公约数为 s. 则其最小公倍数为 ab/s

设 a = sx, b = sy

反证：假设存在 K < ab/s = sxy 为 a, b 的最小公倍数
则 K/a ，K/b 为整数，不妨设为 m,n ，则有

m = K/a < sxy/sx = y
n = K/b < sxy/sy = x

且

a · m = a · K/a = K = K/b · b = n · b

» sxm = am = nsy
» xm=ny
» m = ny/x

因为 x,y 互质，且 n < x, 右边不为整数。而左边为整数。

矛盾，故假设不成立。

* 发现一个现象：使用键盘和鼠标的第一关注点是不一样的（光标还是内容）
CREATE: <2022-01-21 Fri 23:56>

当我在 Emacs 使用键盘的时候，我第一个找的东西是光标（这是一个下意识的
动作），而当我用鼠标的时候，我并不会关注光标在什么地方，因为我用鼠标一
点我所看的位置，光标将会立刻跳转到这个地方，所以我在使用鼠标的时候关注
的是页面的内容。

这个小小的差异是我今天在使用 Ibuffer 的时候发现的（用鼠标），因为之前
键盘驱动地使用 Ibuffer 的时候，我第一时间（下意识）会去找光标，然后再
去看 Ibuffer 给我呈现的内容（当我的视觉中心是光标的时候，我是看不清楚
内容的，因为我的关注点并不在内容上面），所以在这样的观察前提下，我会觉
得 Ibuffer 的内容很不明显，总是会出现不知道我在哪里的情况。我想这应该
是我 Ibuffer用不起来的一个重要原因，之前在 Bs 和 Ibuffer 对比的时候，
还出现了错误归因：说 Ibuffer 用不起来是其设计的原因。

当然不止 Ibuffer ，使用 Dired 的时候也会因为找光标时常出现不知道自己在
哪里的情况。

这是我在使用 Emacs 的时候出现的问题，我以后会去注意自己的关注的内容到
底是什么，可能会更自如地去使用 Emacs 吧。同时也希望我的这次分享能给读
者一点小小的启发 ^_^

* 快速在相同 Major-mode 的 Buffer 中切换
CREATE: <2022-01-20 Thu 20:30>

今天在使用 [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]] 的时候发现了一个需求：我想快速在几个已打开的 Eshell
中切换。搜了一下，发现了[[https://emacs.stackexchange.com/questions/65094/how-to-quickly-cycles-through-buffers-of-the-same-major-mode-as-current-one][这个]]。里面提到了一个 Emacs 的内置包 =bs.el=

我便去尝试了一下，简单配置后发现可以满足我的需求。分享给大家

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'bs-show)
  (setq bs-configurations
        '(("all" nil nil nil nil nil)
          ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)
          ("eshell" nil nil nil fei-bs-not-eshell bs-sort-buffer-interns-are-last)
          ("files-and-scratch" "^\\*scratch\\*$" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)
          ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last))
        )

  (defun fei-bs-not-eshell (buf)
    (with-current-buffer buf (not (eq major-mode 'eshell-mode))))
#+end_src

** 题外话
如果你已经有了一定的 Emacs 使用经验，你可能将 =C-x C-b= 绑定到了
=ibuffer= 上面，我之前也是这么做，但是我在使用 Emacs 的很长一段时间里，
发现 =ibuffer= 一直用不起来。倒是这个 =bs= 我一下子就 get 到了他的设计
想法，很快就用起来了。 =ibuffer= 给我的感觉是：设计的很原始，虽说提供
了很多配置项，但往往是配置了很久结果都不如意，我之前每次打开 =ibuffer=
之后就直接推出了，完全用不起来，哈哈哈。

如果你也和我一样，只是想要一个快速切换 Buffer 的机制，我很推荐你使用一
下 =bs= 这个内置包！
* 给自己的网站添加 favicon 图标
CREATE: <2022-01-17 Mon 14:37>

只要在网页的 head 部分添加以下代码就好了，你可以给每个网页设置不同的
favicon。（我这里说的只是其中的一种方法，其他方法可以参考[[https://blog.csdn.net/guzhao593/article/details/93972193][这里]]。）

#+begin_src html
  <link rel="shortcut icon" href="图标地址" type="image/x-icon" />
  <!-- 或者如下，我用的是这个 -->
  <link rel="shortcut icon" href="图标地址" />
#+end_src

鸣谢：本网站现在用的 favicon 来自[[http://www.mrven.com/node/103][这里]]。

* 终于还是用上了 =org-publish= ，备份一下参考链接
CREATE: <2022-01-16 Sun 20:23>

单纯不想放到浏览器的书签栏里，放在博客做归档挺好的

- [[https://vincent.demeester.fr/posts/2020-03-22-org-mode-website.html][Migrating to an org-mode website]]
- [[https://thibaultmarin.github.io/blog/posts/2016-11-13-Personal_website_in_org.html#org3371cfb][Personal website in org]]
- [[http://www.zhangjiee.com/blog/2019/build-site-with-org-mode.html][使用 org-mode 搭建网站]]
- [[https://www.taingram.org/blog/org-mode-blog.html][Building a Emacs Org-Mode Blog]]
- [[https://www.shellcodes.org/Emacs/%E4%BD%BF%E7%94%A8Org-Mode%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2.html][使用 Org-Mode 生成博客]]
- [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing Org-mode files to HTML]]
- [[https://emacs.stackexchange.com/questions/18818/creating-a-menu-from-file-directory-structure-upon-html-export][Creating a menu from file / directory structure upon html export]]
* Org publish

一开始是想给我的博客主页添加一个导航栏的（后来搜索发现准确的名字叫
preamble），然后就发现了 =org-publish= 这个东西

由于我现在是用 org-export 来书写我的博客的，感觉很简单好用，感觉
=org-publish= 把问题复杂化了，一开始就有点抵触，刚刚突然意识到
=org-publish= 相对于 org-export 来管理博客的好处： *不需要一个一个文件的导出 html*

而且我现在如果不用 =org-publish= 的方案，我添加 =preamble= 是通过
=.dir-locals.el= 的方式实现的，比较烦人的一点是每次打开博客文件夹都会
弹出一个 =.dir-locals.el= 的警告。用 =org-publish= 就不会。

而且一开始我不想用 =org-publish= 的一个原因是：我以为用 =org-publish=
就要为我的博客写死一些配置，以后变起来很比较麻烦，不灵活，刚刚才意识到
并不会，因为 =org-publish-project-alist= 是一个 alist，我的博客的配置
只是这个 alist 中的一项。所以不存在写死的说法，反而会很灵活。

这么说起来 =org-publish= 除了配置麻烦点外，好处多多，之后如果
=org-export= 的方案遇到瓶颈了可以转投 =org-publish= 的怀抱。

* [[https://www.linuxmi.com/ubuntu-20-04-gnu-emacs-27-1.html][编译安装]]svg支持

我用的Linux Mint 20，主要是需要安装下面的[[https://ubuntuforums.org/showthread.php?t=2215649][lib]]
#+begin_src shell
  sudo apt install librsvg2-dev
#+end_src

